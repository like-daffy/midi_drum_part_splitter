name: build-and-release-macos

on:
  workflow_dispatch:
  push:
    tags:
      - "v*"

jobs:
  build-macos:
    name: Build macOS (${{ matrix.arch }})
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-13
            arch: x86_64
          - os: macos-15
            arch: arm64
    runs-on: ${{ matrix.os }}
    env:
      PIP_DISABLE_PIP_VERSION_CHECK: "1"
      PYTHONUNBUFFERED: "1"
      # Minimum macOS target recommended for universal/intel compatibility
      MACOSX_DEPLOYMENT_TARGET: "11.0"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Show environment
        run: |
          python -V
          uname -a
          python -c "import platform, sys; print(platform.platform()); print(platform.machine()); print(sys.maxsize > 2**32)"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade -r requirements.txt

      - name: Build with PyInstaller (onedir, windowed)
        run: |
          pyinstaller --noconfirm --windowed --onedir --name "MIDI_Drum_Splitter" drum_splitter_gui.py

      - name: Verify app bundle
        run: |
          ls -la dist
          ls -la "dist/MIDI_Drum_Splitter.app/Contents/MacOS"
          file "dist/MIDI_Drum_Splitter.app/Contents/MacOS/MIDI_Drum_Splitter" || true

      - name: Zip app bundle
        run: |
          APP_ZIP="MIDI_Drum_Splitter-macos-${{ matrix.arch }}.zip"
          ditto -c -k --sequesterRsrc --keepParent "dist/MIDI_Drum_Splitter.app" "$APP_ZIP"
          echo "APP_ZIP=$APP_ZIP" >> $GITHUB_ENV

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.arch }}
          path: ${{ env.APP_ZIP }}
          if-no-files-found: error

  release:
    name: Create GitHub Release
    needs: build-macos
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          merge-multiple: true

      - name: List downloaded artifacts
        run: |
          ls -la ./artifacts

      - name: Publish Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/*.zip
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


